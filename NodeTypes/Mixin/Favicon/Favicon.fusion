prototype(Litespeed.Style:Favicon) < prototype(Neos.Fusion:Component) {
    notFoundPage = 'Litespeed.Integration:Document.NotFound'

    icon = Neos.Fusion:Map {
        items = ${q(site).property('themeFavicon')}
        itemRenderer = ${item.resource.filename  == request.arguments.favicon + request.arguments.size + '.' + request.arguments.fileextension ? item.resource : null}
        @process.getSingle = ${Array.first(Array.filter(value))}
    }

    renderer = Neos.Fusion:Case {
        hasIcon {
            condition = ${props.icon}
            renderer = Neos.Fusion:Http.Message {
                httpResponseHead {
                    statusCode = 301
                    headers.Location = Neos.Fusion:ResourceUri {
                    resource = ${props.icon}
                    }
                }
            }
        }
        notFound {
            condition = true
            notFoundPage = ${q(site).children('[instanceof Litespeed.Integration:Document.NotFound]').get(0)}
            @context {
                node = ${this.notFoundPage}
                documentNode = ${this.notFoundPage}
            }
            type = ${props.notFoundPage}
        }
    }

    @cache {
        mode = 'dynamic'
        entryIdentifier {
            documentNode = ${site}
            editPreviewMode = ${node.context.currentRenderingMode.name}
            favicon = 'favicon'
            arguments = ${request.arguments.favicon}
        }
        entryDiscriminator = ${request.arguments.favicon + request.arguments.fileextension + request.arguments.size}
        context {
            1 = 'node'
            2 = 'documentNode'
            3 = 'site'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(site)}
        }
    }
}

root {
    favicon {
        @position = 'start 1'
        condition = ${site && request.arguments.favicon}
        renderer = Litespeed.Style:Favicon
    }

    @cache.entryIdentifier.favicon = ${request.arguments.favicon}
}
